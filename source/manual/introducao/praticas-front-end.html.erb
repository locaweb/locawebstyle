---
title: Informações Iniciais

menu_page: sidebar-informacoes-iniciais.erb
---

<article class="text">
	<header>
		<!-- <h2 class="ico-edit">Aprenda o básico</h2> -->
		<h1>O que utilizamos no Locaweb Style</h1>
		<h3>Temos algumas depêndencias e informações importantes para você que vai incluir o Locaweb Style em seu projeto.</h3>
	</header>

	<h1>Práticas de escrita front-end</h1>
	<p>Como este é um projeto onde várias pessoas escrevem código front, precisamos manter alguns padrões de escrita. Isso é importante para que o projeto perdure e que novos integrantes entendam facilmente como tudo funciona. </p>

	<p>Quando definimos um padrão de escrita de código, queremos que o código seja uniforme. Isso quer dizer que o código precisa parecer que foi escrito por uma única pessoa. Assim, conseguimos manter a manutenção mais simples, garantindo que o projeto seja flexível e escalável de forma consistente. Abaixo separamos algumas das regras que devemos seguir para manter isso tudo funcionando. </p>

	<p>Pode ser que tenha alguma regra que você goste ou não esteja familiarizado. Infelizmente, você vai precisa seguir. Todo mundo tem um gosto e não é possível manter o gosto de todos, por isso precisamos escolher apenas um.</p>

	<h2>Estrutura básica para iniciar um HTML</h2>
	<p>Senhor programador back-end, utilize esse código para iniciar seu HTML. </p>

	<pre class="lang-html prettyprint linenums">
		&lt;!DOCTYPE html&gt;
		&lt;html lang=&quot;pt-br&quot;&gt;
		&lt;head&gt;
		&lt;title&gt;&lt;/title&gt;
		&lt;meta charset=&quot;utf-8&quot;&gt;
		&lt;/head&gt;
		&lt;body&gt;

		&lt;/body&gt;
		&lt;/html&gt;
	</pre>

	<h2>Espaços em brancos</h2>
	<p>Escolher entre tabs e espaços sempre é uma dúvida terrível. Mesmo assim, quando se trata de HTML/CSS e Javascript, o padrão sempre foi TABs, embora usemos espaços em linguagens como Ruby, Python e etc. </p>

	<h2>Descrição de várias classes ou IDs</h2>
	<p>Como tratamos vários patterns, precisamos sempre reutilizar muito código para manter a uniformidade visual dos elementos e facilitar a manutenção. Por isso, as vezes, precisamos definir o mesmo estilo para vários elementos, assim:</p>

	<pre class="lang-css prettyprint linenums">
		collapseGroup summary span,
		.boxGray.listDetail a,
		.serviceName a,
		[class^="ico"],
		[class*=" ico"],
		#menuPrincipal .btMenu a,
		#menuPrincipal .parent:hover > a,
		#menuPrincipal .parent > a:hover,
		#menuPrincipal > ul > li > a:hover {
		color: #4B7CB8;
	}
</pre>

<p>Para não ficar uma linha muito grande com vários elementos definidos, quebramos linha a cada seletor criado. Isso mantém a leitura legível e nos ajuda a identificar erros. Não se preocupe, o Ruby vai minificar todo esse código depois, por isso, ele não vai para a produção dessa forma.</p>

<h2>Encoding</h2>
<p>Eu sei que eu não preciso dizer, mas quem sabe, não é? <br>
	O encoding utilizado é o padrão da web inteira: <strong>UTF-8</strong>.</p>

	<pre class="lang-html prettyprint linenums">&lt;meta charset="utf-8"&gt;</pre>

	<p>SEM BOM! Pelo amor de Deus. </p>

	<h2>Referências de Entidades</h2>
	<p>NUNCA use entidades do HTML. Como nós utilizamos UTF-8, coloque o caractere diretamente.</p>
	<p><strong>O simbolo do Euro é <b>€</b>. Cifrão <b>$</b> </strong></p>

	<h2>Cores</h2>
	<p>Sempre que utilizar uma cor hexadecimal que tenha repetição de valores, use sempre o valor de atalho, assim:</p>
	<pre class="lang-css prettyprint linenums">
		/** Recomendado **/
		p {color: #AAA;}

		/** Não Recomendado **/
		p {color: #AAAAAA;}
	</pre>

	<h3>RGBA</h3>
	<p>Sempre que possível, utilize RGBA e mantenha o fallback para browsers antigos. Nós utilizamos Modernizr para que isso seja simples. Um exemplo:</p>

	<pre class="lang-css prettyprint linenums">
		p { color: rgba(0, 0, 0, 0.5); }
		.no-rgba p { color: #000; }
	</pre>

	<h2>Aspas</h2>
	<p>Tanto no CSS quanto no HTML utilizamos ASPAS DUPLAS. Nunca aspas simples, a não ser no Javascript/JQuery.</p>
	<pre class="lang-css prettyprint linenums">
		input[type="checkout"] { ... }
		div:after { content: " "; }
	</pre>

	<h2>Comentários</h2>
	<p>Para uma seção:</p>
	<pre class="lang-css prettyprint linenums">
		/*** HEADER
		**** Header principal do site
		***/
	</pre>

	<p>Nunca use comentários na mesma linha da propriedade:</p>
	<pre class="lang-css prettyprint linenums">
		p {color: #FFF;} /** Nunca use comentários assim **/
		p {color: #FFF; /** Nunca use comentários assim **/ }
	</pre>

	<p>Assim é melhor:</p>
	<pre class="lang-css prettyprint linenums">
		/** Assim é melhor **/
		p {
		color: #FFF;
		background: red;
		margin: 0;

		/** Assim também é bom **/
		padding: 0;
	}
	</pre>

</article>